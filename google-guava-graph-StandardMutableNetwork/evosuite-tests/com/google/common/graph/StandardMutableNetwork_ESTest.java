/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 04 14:15:08 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.BoundType;
import com.google.common.graph.DirectedMultiNetworkConnections;
import com.google.common.graph.DirectedNetworkConnections;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardNetwork;
import java.sql.BatchUpdateException;
import java.sql.SQLDataException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class StandardMutableNetwork_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Comparable<Optional<Integer>>, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Optional<Integer>>, Comparable<Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.removeNode((Comparable<Optional<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<String, Integer> standardMutableNetwork0 = new StandardMutableNetwork<String, Integer>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.removeEdge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // edge
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Optional<Integer>, Comparable<String>> standardMutableNetwork0 = new StandardMutableNetwork<Optional<Integer>, Comparable<String>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.addNode((Optional<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<String, DirectedMultiNetworkConnections<String, Object>> standardMutableNetwork0 = new StandardMutableNetwork<String, DirectedMultiNetworkConnections<String, Object>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.addEdge("", "", (DirectedMultiNetworkConnections<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // edge
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<SQLTransientConnectionException, Optional<Integer>> standardMutableNetwork0 = new StandardMutableNetwork<SQLTransientConnectionException, Optional<Integer>>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.addEdge((EndpointPair<SQLTransientConnectionException>) null, (Optional<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StandardMutableNetwork<Object, BoundType> standardMutableNetwork0 = null;
      try {
        standardMutableNetwork0 = new StandardMutableNetwork<Object, BoundType>((NetworkBuilder<? super Object, ? super BoundType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableNetwork<Optional<Integer>, BoundType> standardMutableNetwork0 = new StandardMutableNetwork<Optional<Integer>, BoundType>(networkBuilder0);
      Integer integer0 = new Integer(0);
      Optional<Integer> optional0 = Optional.ofNullable(integer0);
      BoundType boundType0 = BoundType.CLOSED;
      // Undeclared exception!
      try { 
        standardMutableNetwork0.addEdge(optional0, optional0, boundType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.util.Optional@0000000008, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsSelfLoops(true);
      StandardMutableNetwork<Comparable<Object>, Optional<Integer>> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<Object>, Optional<Integer>>(networkBuilder1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-155));
      Optional<Integer> optional0 = Optional.of(integer0);
      boolean boolean0 = standardMutableNetwork0.addEdge(comparable0, comparable0, optional0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Object, Comparable<Optional<Integer>>> standardMutableNetwork0 = new StandardMutableNetwork<Object, Comparable<Optional<Integer>>>(networkBuilder0);
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "X3-Plg6+B*zLq~", intArray0);
      SQLWarning sQLWarning0 = new SQLWarning("X3-Plg6+B*zLq~", "AW}", 1282, batchUpdateException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "com.google.common.collect.MultimapBuilder$ArrayListSupplier", 0, sQLWarning0);
      SQLDataException sQLDataException0 = new SQLDataException(")uvW._mk/s#<ZrPP", (String) null, sQLRecoverableException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("X3-Plg6+B*zLq~", "AW}", 0, sQLDataException0);
      Comparable<Optional<Integer>> comparable0 = (Comparable<Optional<Integer>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = standardMutableNetwork0.addEdge((Object) sQLTransientConnectionException0, (Object) "X3-Plg6+B*zLq~", comparable0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsParallelEdges(true);
      StandardMutableNetwork<String, DirectedMultiNetworkConnections<String, Object>> standardMutableNetwork0 = new StandardMutableNetwork<String, DirectedMultiNetworkConnections<String, Object>>(networkBuilder1);
      boolean boolean0 = standardMutableNetwork0.addNode(" l(=xD16H`\"J dCBK");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<DirectedNetworkConnections<Optional<Integer>, Integer>, Integer> standardMutableNetwork0 = new StandardMutableNetwork<DirectedNetworkConnections<Optional<Integer>, Integer>, Integer>(networkBuilder0);
      Integer integer0 = new Integer(2150);
      boolean boolean0 = standardMutableNetwork0.removeEdge(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0);
      NetworkBuilder<Object, Integer> networkBuilder1 = NetworkBuilder.from((Network<Object, Integer>) standardNetwork0);
      StandardMutableNetwork<Object, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Object, Integer>(networkBuilder1);
      Object object0 = new Object();
      boolean boolean0 = standardMutableNetwork0.removeNode(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Integer integer0 = new Integer(624);
      StandardMutableNetwork<Integer, Comparable<SQLTransientConnectionException>> standardMutableNetwork0 = new StandardMutableNetwork<Integer, Comparable<SQLTransientConnectionException>>(networkBuilder0);
      boolean boolean0 = standardMutableNetwork0.addNode(integer0);
      assertTrue(boolean0);
      
      boolean boolean1 = standardMutableNetwork0.removeNode(integer0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Optional<Object>, Integer> standardMutableNetwork0 = new StandardMutableNetwork<Optional<Object>, Integer>(networkBuilder0);
      Optional<Object> optional0 = Optional.ofNullable((Object) networkBuilder0);
      EndpointPair<Optional<Object>> endpointPair0 = EndpointPair.ordered(optional0, optional0);
      Integer integer0 = new Integer(15);
      // Undeclared exception!
      try { 
        standardMutableNetwork0.addEdge(endpointPair0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.util.Optional@0000000009, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Object, Object> standardNetwork0 = new StandardNetwork<Object, Object>(networkBuilder0);
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsSelfLoops(true);
      StandardMutableNetwork<SQLTransientConnectionException, Integer> standardMutableNetwork0 = new StandardMutableNetwork<SQLTransientConnectionException, Integer>(networkBuilder1);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("com.google.common.graph.GraphConstants");
      EndpointPair<SQLTransientConnectionException> endpointPair0 = EndpointPair.of((Network<?, ?>) standardNetwork0, sQLTransientConnectionException0, sQLTransientConnectionException0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = standardMutableNetwork0.addEdge(endpointPair0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      NetworkBuilder<Object, Object> networkBuilder1 = networkBuilder0.allowsParallelEdges(true);
      StandardMutableNetwork<String, Comparable<Object>> standardMutableNetwork0 = new StandardMutableNetwork<String, Comparable<Object>>(networkBuilder1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = standardMutableNetwork0.addEdge("(K#LPp$", "", comparable0);
      assertTrue(boolean0);
  }
}
