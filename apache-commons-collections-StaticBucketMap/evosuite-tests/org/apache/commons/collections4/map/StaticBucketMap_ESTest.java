/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 14:40:56 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

public class StaticBucketMap_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> staticBucketMap0 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>(2);
      Integer integer0 = new Integer(2);
      staticBucketMap0.clear();
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "u[ti7&B\"h&");
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      staticBucketMap0.put("u[ti7&B\"h&", abstractMap_SimpleImmutableEntry0);
      staticBucketMap0.hashCode();
      StaticBucketMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, Object>> staticBucketMap1 = new StaticBucketMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, Object>>(2);
      staticBucketMap1.entrySet();
      StaticBucketMap<String, String> staticBucketMap2 = new StaticBucketMap<String, String>(2);
      staticBucketMap2.entrySet();
      StaticBucketMap<HashMap<String, MockThread>, Object> staticBucketMap3 = new StaticBucketMap<HashMap<String, MockThread>, Object>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap3.replaceAll(biFunction0);
      HashMap<String, MockThread> hashMap0 = new HashMap<String, MockThread>();
      Integer integer1 = new Integer(2);
      staticBucketMap3.put(hashMap0, integer1);
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> staticBucketMap4 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((-1077));
      staticBucketMap4.hashCode();
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, MockThread>, String> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, MockThread>, String>((-1077));
      staticBucketMap5.replace((AbstractMap.SimpleEntry<Integer, MockThread>) null, "org.apache.commons.collections4.map.StaticBucketMap$KeyIterator", (String) null);
      staticBucketMap5.replace((AbstractMap.SimpleEntry<Integer, MockThread>) null, "u[ti7&B\"h&", "");
      staticBucketMap5.clear();
      StaticBucketMap<HashMap<Object, String>, MockThread> staticBucketMap6 = new StaticBucketMap<HashMap<Object, String>, MockThread>();
      staticBucketMap6.clear();
      StaticBucketMap<Object, String> staticBucketMap7 = new StaticBucketMap<Object, String>();
      staticBucketMap7.entrySet();
      StaticBucketMap<Integer, Object> staticBucketMap8 = new StaticBucketMap<Integer, Object>(2);
      staticBucketMap8.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StaticBucketMap<Object, String> staticBucketMap0 = new StaticBucketMap<Object, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.replaceAll(biFunction0);
      staticBucketMap0.values();
      Collection<String> collection0 = staticBucketMap0.values();
      StaticBucketMap<MockThread, Object> staticBucketMap1 = new StaticBucketMap<MockThread, Object>();
      staticBucketMap1.remove((Object) "org.apache.commons.collections4.map.AbstractIterableMap");
      staticBucketMap1.equals(collection0);
      staticBucketMap1.isEmpty();
      StaticBucketMap<HashMap<String, Object>, Object> staticBucketMap2 = new StaticBucketMap<HashMap<String, Object>, Object>(671);
      StaticBucketMap<Integer, Integer> staticBucketMap3 = new StaticBucketMap<Integer, Integer>();
      Integer integer0 = new Integer((-2542));
      BiFunction<Integer, Integer, Integer> biFunction1 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = staticBucketMap3.merge(integer0, integer0, biFunction1);
      staticBucketMap3.hashCode();
      StaticBucketMap<String, String> staticBucketMap4 = new StaticBucketMap<String, String>((-2590));
      Integer integer2 = new Integer(0);
      staticBucketMap3.equals(integer2);
      staticBucketMap4.get(integer1);
      staticBucketMap3.clear();
      StaticBucketMap<Integer, HashMap<Object, String>> staticBucketMap5 = new StaticBucketMap<Integer, HashMap<Object, String>>((-1));
      staticBucketMap5.size();
      StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, Object> staticBucketMap6 = new StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      staticBucketMap6.clear();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StaticBucketMap<MockThread, Object> staticBucketMap0 = new StaticBucketMap<MockThread, Object>();
      staticBucketMap0.keySet();
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.merge(mockThread0, mockThread0, biFunction0);
      StaticBucketMap<AbstractMap.SimpleEntry<MockThread, Object>, String> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<MockThread, Object>, String>();
      staticBucketMap1.entrySet();
      staticBucketMap1.hashCode();
      int int0 = 0;
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      staticBucketMap0.compute(mockThread0, biFunction1);
      StaticBucketMap<Object, Integer> staticBucketMap2 = new StaticBucketMap<Object, Integer>(0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        staticBucketMap2.putAll((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StaticBucketMap<Object, Integer> staticBucketMap0 = new StaticBucketMap<Object, Integer>();
      // Undeclared exception!
      try { 
        staticBucketMap0.putAll((Map<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StaticBucketMap<Integer, Integer> staticBucketMap0 = new StaticBucketMap<Integer, Integer>();
      int int0 = (-2531);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)staticBucketMap0.entrySet();
      staticBucketMap0.remove((Object) set0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      staticBucketMap0.putAll(hashMap0);
      Integer integer2 = new Integer((-2531));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Integer, Integer> biFunction1 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction1).apply(any() , anyInt());
      staticBucketMap0.replaceAll(biFunction1);
      staticBucketMap0.computeIfPresent(integer2, biFunction0);
      staticBucketMap0.entrySet();
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer>((-2531));
      staticBucketMap1.keySet();
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<MockThread, Integer>> staticBucketMap2 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<MockThread, Integer>>(1450);
      String string0 = "org.apache.commons.collections4.map.AbstractIterableMap";
      AbstractMap.SimpleImmutableEntry<MockThread, Integer> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<MockThread, Integer>((Map.Entry<? extends MockThread, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 44;
      StaticBucketMap<String, HashMap<String, String>> staticBucketMap0 = new StaticBucketMap<String, HashMap<String, String>>(44);
      Integer integer0 = new Integer(44);
      staticBucketMap0.remove((Object) integer0);
      staticBucketMap0.hashCode();
      StaticBucketMap<MockThread, Object> staticBucketMap1 = new StaticBucketMap<MockThread, Object>(0);
      String string0 = "~@bIKn.U<b/7:fM=mk";
      staticBucketMap1.containsKey("~@bIKn.U<b/7:fM=mk");
      StaticBucketMap<Object, String> staticBucketMap2 = new StaticBucketMap<Object, String>((-1654));
      // Undeclared exception!
      try { 
        staticBucketMap2.putAll((Map<?, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticBucketMap<Integer, String> staticBucketMap0 = new StaticBucketMap<Integer, String>(3246);
      Integer integer0 = new Integer(3246);
      staticBucketMap0.containsValue(integer0);
      StaticBucketMap<MockThread, MockThread> staticBucketMap1 = new StaticBucketMap<MockThread, MockThread>(3246);
      staticBucketMap1.clear();
      StaticBucketMap<Object, String> staticBucketMap2 = new StaticBucketMap<Object, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "");
      staticBucketMap2.atomic(mockThread1);
      staticBucketMap2.containsValue(integer0);
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<MockThread, Object>> staticBucketMap3 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<MockThread, Object>>(3246);
      staticBucketMap3.clear();
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer> staticBucketMap4 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer>((-1159));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StaticBucketMap<Object, Integer> staticBucketMap0 = new StaticBucketMap<Object, Integer>(255);
      Runnable runnable0 = null;
      // Undeclared exception!
      try { 
        staticBucketMap0.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // runnable
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticBucketMap<String, Object> staticBucketMap0 = new StaticBucketMap<String, Object>();
      staticBucketMap0.values();
      StaticBucketMap<MockThread, String> staticBucketMap1 = new StaticBucketMap<MockThread, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      MockThread mockThread1 = new MockThread(mockThread0, "{({BjzFd<pEm2yv");
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap1.merge(mockThread2, "{({BjzFd<pEm2yv", biFunction0);
      staticBucketMap1.isEmpty();
      StaticBucketMap<Object, Integer> staticBucketMap2 = new StaticBucketMap<Object, Integer>();
      Integer integer0 = new Integer((-1));
      staticBucketMap2.replace((Object) mockThread1, integer0);
      Integer integer1 = new Integer(10);
      staticBucketMap2.containsKey(integer1);
      MockThread.getAllStackTraces();
      StaticBucketMap<String, String> staticBucketMap3 = new StaticBucketMap<String, String>();
      staticBucketMap3.hashCode();
      StaticBucketMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> staticBucketMap4 = new StaticBucketMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>();
      staticBucketMap4.entrySet();
      StaticBucketMap<MockThread, Object> staticBucketMap5 = new StaticBucketMap<MockThread, Object>();
      staticBucketMap5.equals((Object) null);
      staticBucketMap3.keySet();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StaticBucketMap<String, String> staticBucketMap0 = new StaticBucketMap<String, String>(0);
      Integer integer0 = new Integer(0);
      staticBucketMap0.containsValue(integer0);
      StaticBucketMap<MockThread, Object> staticBucketMap1 = new StaticBucketMap<MockThread, Object>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      mockThread0.getStackTrace();
      staticBucketMap1.atomic(mockThread0);
      StaticBucketMap<AbstractMap.SimpleEntry<MockThread, Object>, String> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleEntry<MockThread, Object>, String>(2346);
      staticBucketMap2.values();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Integer> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, Integer>((-3042));
      MockThread mockThread0 = new MockThread();
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      MockThread mockThread1 = new MockThread(mockThread0);
      Thread[] threadArray0 = new Thread[2];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      staticBucketMap0.containsKey(mockThread1);
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Integer>> staticBucketMap1 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      staticBucketMap1.clear();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(1494);
      staticBucketMap2.size();
      StaticBucketMap<String, AbstractMap.SimpleEntry<Object, Integer>> staticBucketMap3 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Object, Integer>>(1494);
      staticBucketMap3.clear();
      StaticBucketMap<Object, Object> staticBucketMap4 = new StaticBucketMap<Object, Object>(1185);
      staticBucketMap4.atomic(mockThread0);
      staticBucketMap4.size();
      StaticBucketMap<Integer, String> staticBucketMap5 = new StaticBucketMap<Integer, String>((-3042));
      staticBucketMap5.entrySet();
      StaticBucketMap<Object, String> staticBucketMap6 = new StaticBucketMap<Object, String>();
      staticBucketMap6.values();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, MockThread>, Integer> staticBucketMap7 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, MockThread>, Integer>();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, MockThread>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, MockThread>>((-2201));
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, MockThread>>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, MockThread>>>)staticBucketMap0.entrySet();
      StaticBucketMap<String, Object> staticBucketMap1 = new StaticBucketMap<String, Object>((-2201));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      staticBucketMap1.putAll(hashMap0);
      StaticBucketMap<Integer, HashMap<Integer, Integer>> staticBucketMap2 = new StaticBucketMap<Integer, HashMap<Integer, Integer>>((-2201));
      staticBucketMap2.clear();
      StaticBucketMap<Integer, Object> staticBucketMap3 = new StaticBucketMap<Integer, Object>();
      staticBucketMap3.clear();
      int int0 = staticBucketMap3.size();
      StaticBucketMap<HashMap<String, String>, Object> staticBucketMap4 = new StaticBucketMap<HashMap<String, String>, Object>();
      Integer integer0 = new Integer((-2201));
      hashMap0.put("org.apache.commons.collections4.map.StaticBucketMap$1", integer0);
      staticBucketMap4.equals("0wH=|QauNF3^IKq4`;M");
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>((-2201));
      staticBucketMap5.entrySet();
      staticBucketMap5.entrySet();
      staticBucketMap5.equals(set0);
      staticBucketMap1.putAll(hashMap0);
      assertEquals(1, staticBucketMap1.size());
      
      StaticBucketMap<MockThread, Integer> staticBucketMap6 = new StaticBucketMap<MockThread, Integer>((-2201));
      staticBucketMap6.clear();
      StaticBucketMap<Object, Object> staticBucketMap7 = new StaticBucketMap<Object, Object>();
      int int1 = staticBucketMap7.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StaticBucketMap<String, AbstractMap.SimpleEntry<Object, String>> staticBucketMap0 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Object, String>>((-1009));
      staticBucketMap0.entrySet();
      StaticBucketMap<Integer, Object> staticBucketMap1 = new StaticBucketMap<Integer, Object>(0);
      staticBucketMap1.entrySet();
      StaticBucketMap<String, MockThread> staticBucketMap2 = new StaticBucketMap<String, MockThread>();
      staticBucketMap2.entrySet();
      StaticBucketMap<Integer, MockThread> staticBucketMap3 = new StaticBucketMap<Integer, MockThread>((-806));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "`Fkf.4m,T$/&GmF`", 0L);
      staticBucketMap3.put((Integer) null, mockThread0);
      assertEquals(1, staticBucketMap3.size());
      
      StaticBucketMap<String, Object> staticBucketMap4 = new StaticBucketMap<String, Object>();
      staticBucketMap4.atomic(mockThread0);
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, Object>, String> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      boolean boolean0 = staticBucketMap5.equals(staticBucketMap4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StaticBucketMap<Integer, String> staticBucketMap0 = new StaticBucketMap<Integer, String>(0);
      staticBucketMap0.clear();
      staticBucketMap0.remove((Object) "");
      MockThread mockThread0 = new MockThread("LN1T");
      mockThread0.getContextClassLoader();
      staticBucketMap0.remove((Object) mockThread0, (Object) mockThread0);
      staticBucketMap0.keySet();
      Object object0 = new Object();
      staticBucketMap0.get(object0);
      assertEquals(0, staticBucketMap0.size());
      
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>((-1548));
      staticBucketMap1.entrySet();
      StaticBucketMap<MockThread, MockThread> staticBucketMap2 = new StaticBucketMap<MockThread, MockThread>((-1548));
      staticBucketMap2.hashCode();
      StaticBucketMap<Integer, MockThread> staticBucketMap3 = new StaticBucketMap<Integer, MockThread>((-1589));
      staticBucketMap3.values();
      StaticBucketMap<Object, Object> staticBucketMap4 = new StaticBucketMap<Object, Object>();
      boolean boolean0 = staticBucketMap4.containsKey((Object) null);
      staticBucketMap4.hashCode();
      StaticBucketMap<Integer, Object> staticBucketMap5 = new StaticBucketMap<Integer, Object>();
      Integer integer0 = new Integer(11);
      staticBucketMap5.get(integer0);
      StaticBucketMap<Integer, Integer> staticBucketMap6 = new StaticBucketMap<Integer, Integer>((-1589));
      boolean boolean1 = staticBucketMap6.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaticBucketMap<String, MockThread> staticBucketMap0 = new StaticBucketMap<String, MockThread>((-656));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "org.apache.commons.collections4.map.AbstractIterableMap");
      BiFunction<MockThread, Object, MockThread> biFunction0 = (BiFunction<MockThread, Object, MockThread>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.merge("b3jdQ-. tqK!i", mockThread0, biFunction0);
      staticBucketMap0.keySet();
      staticBucketMap0.entrySet();
      StaticBucketMap<Object, Object> staticBucketMap1 = new StaticBucketMap<Object, Object>((-656));
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)staticBucketMap1.entrySet();
      assertEquals(0, set0.size());
  }
}
