/*
 * This file was automatically generated by EvoSuite
 * Tue Jan 19 16:58:07 GMT 2021
 */

package org.apache.commons.validator.routines;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.validator.routines.TimeValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

 
public class TimeValidator_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1936, "org.apache.commons.validator.rouzines.AbstractFormatValidator");
      Calendar calendar0 = timeValidator0.validate("", "_", (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1936, "org.apache.commons.validator.rouzines.AbstractFormatValidator");
      Locale locale0 = Locale.US;
      Calendar calendar0 = timeValidator0.validate("12:16 AM", locale0, (TimeZone) simpleTimeZone0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      Calendar calendar0 = timeValidator0.validate("8:21 PM", locale0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 8);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = timeValidator0.validate("", "", timeZone0);
      assertNull(calendar0);
  }

/* manually removed becuse of test fails when running general junit runner instead of evosuite-runner
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5, "+");
      Calendar calendar0 = timeValidator0.validate("+", "+", (TimeZone) simpleTimeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+,offset=5,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }
*/

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("$[");
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      Calendar calendar0 = timeValidator0.validate("$[", "$[", locale0, timeZone0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = timeValidator0.validate("+", "+", locale0);
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate("", "");
      assertNull(calendar0);
  }

/* manually removed becuse of test fails when running general junit runner instead of evosuite-runner
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate("8:21 PM");
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=8,HOUR_OF_DAY=?,MINUTE=21,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }
*/

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1936, 1936, 1936, 1936, 1936);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0);
      MockGregorianCalendar mockGregorianCalendar1 = (MockGregorianCalendar)timeValidator0.processParsedValue(mockGregorianCalendar0, dateFormat0);
      assertTrue(mockGregorianCalendar1.isLenient());
  }

/* manually removed becuse of test fails when running general junit runner instead of evosuite-runner
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      Calendar calendar1 = timeValidator0.validate("6", "6");
      int int0 = timeValidator0.compareTime(calendar0, calendar1);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertEquals(1, int0);
  }
*/

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Locale locale0 = Locale.CANADA_FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      int int0 = timeValidator0.compareSeconds(calendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-413), (-413), (-413));
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 14, 0, 10, 14);
      int int0 = timeValidator0.compareMinutes(calendar0, mockGregorianCalendar0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, (-3461));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1661, (-3461), (-3461), (-2859), 1661, (-620));
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, calendar0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-669), (-669), (-669));
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-113), 14, 757, (-1252), (-113), 14);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1252), "jyz,,Af8n0=%N{@`;");
      Locale locale0 = Locale.GERMAN;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      int int0 = timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 4);
      TimeZone timeZone0 = TimeZone.getTimeZone("&@bqCNNC99S`@b+RM`");
      // Undeclared exception!
      try { 
        timeValidator0.validate("R$Z\"", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 4
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(false, 5);
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2490, "&H_-Og`1P(a");
      // Undeclared exception!
      try { 
        timeValidator0.validate("&H_-Og`1P(a", locale0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 5
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeValidator timeValidator0 = new TimeValidator(false, 1956);
      // Undeclared exception!
      try { 
        timeValidator0.validate("g2BJ4", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 1956
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ITALIAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(14, "[,27c`");
      // Undeclared exception!
      try { 
        timeValidator0.validate("4>]Rm2RR", "OzG,^^|v3c^o'Kp'a", locale0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        timeValidator0.validate("Pg_{|~", "I(HX?yzFyUh&?`wp", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.validate("8r2@\"l4*H `H", "YXwN)'4\"%tf~I f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator(true, 7);
      // Undeclared exception!
      try { 
        timeValidator0.validate("xks&Xe/;!]XO<dr/zQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 7
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue(locale0, (Format) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.TimeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      // Undeclared exception!
      try { 
        timeValidator0.processParsedValue(mockSimpleDateFormat0, decimalFormat0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.DecimalFormat cannot be cast to java.text.DateFormat
         //
         verifyException("org.apache.commons.validator.routines.TimeValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.compareTime(calendar0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1938, 1938, 1938, 1938, 1938);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.compareSeconds(calendar0, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 3);
      // Undeclared exception!
      try { 
        timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      calendar0.set(0, (-2533));
      // Undeclared exception!
      try { 
        timeValidator0.compareMinutes(calendar0, calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      // Undeclared exception!
      try { 
        timeValidator0.compareHours((Calendar) null, (Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.validator.routines.AbstractCalendarValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.set(0, 1231);
      // Undeclared exception!
      try { 
        timeValidator0.compareHours(mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareMinutes(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-885), "LcHaM4Qm:I0H");
      // Undeclared exception!
      try { 
        timeValidator0.validate("LcHaM4Qm:I0H", "LcHaM4Qm:I0H", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Calendar calendar0 = timeValidator0.validate(".(/v\"");
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = timeValidator0.validate("", "", locale0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Calendar calendar0 = timeValidator0.validate("", timeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1936, 1936, 1936);
      int int0 = timeValidator0.compareTime(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = timeValidator0.validate("", locale0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1936, "org.apache.commons.validator.rouzines.AbstractFormatValidator");
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = timeValidator0.validate("_", locale0, (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = timeValidator0.compareSeconds(mockGregorianCalendar0, mockGregorianCalendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeValidator timeValidator0 = new TimeValidator();
      Calendar calendar0 = MockCalendar.getInstance();
      int int0 = timeValidator0.compareHours(calendar0, calendar0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeValidator timeValidator0 = TimeValidator.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1936, "org.apache.commons.validator.rouzines.AbstractFormatValidator");
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = timeValidator0.validate("org.apache.commons.validator.rouzines.AbstractFormatValidator", "_", locale0, (TimeZone) simpleTimeZone0);
      assertNull(calendar0);
  }
}
