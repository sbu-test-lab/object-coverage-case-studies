/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 13:35:42 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NavigableMap;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.map.TransformedMap;
import org.apache.commons.collections4.map.TransformedSortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class TransformedSortedMap_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeMap<Integer, Boolean> treeMap0 = new TreeMap<Integer, Boolean>();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      TransformedSortedMap<Integer, Boolean> transformedSortedMap0 = new TransformedSortedMap<Integer, Boolean>(treeMap0, invokerTransformer0, (Transformer<? super Boolean, ? extends Boolean>) null);
      Integer integer0 = new Integer(0);
      SortedMap<Integer, Boolean> sortedMap0 = transformedSortedMap0.headMap(integer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      Integer integer0 = new Integer(512);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      TransformedSortedMap<Integer, String> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, String>) treeMap0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0, (Transformer<? super String, ? extends String>) transformer0);
      treeMap0.put(integer0, "");
      SortedMap<Integer, String> sortedMap0 = transformedSortedMap0.tailMap(integer0);
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".EY}[W|");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer(".EY}[W|", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      treeMap0.put("", predicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(andPredicate0);
      TransformedSortedMap<String, Predicate<Object>> transformedSortedMap0 = new TransformedSortedMap<String, Predicate<Object>>(treeMap0, transformer0, constantTransformer0);
      SortedMap<String, Predicate<Object>> sortedMap0 = transformedSortedMap0.subMap("", ".EY}[W|");
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("61<");
      Transformer<String, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("61<", "61<");
      TransformedSortedMap<String, String> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<String, String>) treeMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedSortedMap0.lastKey();
      assertEquals("61<", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".EY}[W|");
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(692);
      treeMap0.put(integer0, integer0);
      TransformedMap<Object, Integer> transformedMap0 = TransformedMap.transformedMap((Map<Object, Integer>) hashMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Integer, ? extends Integer>) null);
      Transformer<Object, Integer> transformer1 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) transformedMap0);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = new TransformedSortedMap<Integer, Integer>(treeMap0, transformer1, (Transformer<? super Integer, ? extends Integer>) null);
      SortedMap<Integer, Integer> sortedMap0 = transformedSortedMap0.getSortedMap();
      assertEquals(1, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Transformer<Object, Closure<Object>> transformer0 = InvokerTransformer.invokerTransformer("EQUAL");
      Integer integer0 = new Integer((-1));
      TreeMap<Boolean, Object> treeMap0 = new TreeMap<Boolean, Object>();
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      PredicateTransformer<Integer> predicateTransformer0 = new PredicateTransformer<Integer>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(integer0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      TransformedSortedMap<Boolean, Object> transformedSortedMap0 = new TransformedSortedMap<Boolean, Object>(treeMap0, constantTransformer0, transformer0);
      TransformedSortedMap<Boolean, Object> transformedSortedMap1 = new TransformedSortedMap<Boolean, Object>(transformedSortedMap0, constantTransformer0, transformer0);
      SortedMap<Boolean, Object> sortedMap0 = transformedSortedMap1.getSortedMap();
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".EY}[W|");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer(".EY}[W|", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      treeMap0.put("", predicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(andPredicate0);
      TransformedSortedMap<String, Predicate<Object>> transformedSortedMap0 = new TransformedSortedMap<String, Predicate<Object>>(treeMap0, transformer0, constantTransformer0);
      String string0 = transformedSortedMap0.firstKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      NavigableMap<String, Object> navigableMap0 = treeMap0.descendingMap();
      Transformer<Object, String> transformer1 = ConstantTransformer.nullTransformer();
      TransformedSortedMap<String, Object> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<String, Object>) navigableMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super Object, ?>) transformer0);
      Comparator<? super String> comparator0 = transformedSortedMap0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0, classArray0, classArray0);
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(instantiateFactory0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      Transformer<Object, Predicate<Object>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Predicate<Object>>) null);
      IfTransformer<Object, Predicate<Object>> ifTransformer0 = new IfTransformer<Object, Predicate<Object>>(onePredicate0, transformer0, transformer0);
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformingSortedMap((SortedMap<Object, Predicate<Object>>) null, (Transformer<? super Object, ?>) factoryTransformer0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) ifTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Transformer<String, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedMap<String, String> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<String, String>) treeMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      treeMap0.put("", "`L^%s-nM)DFHzS");
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<String, String>) transformedSortedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("X,Mb=|!", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, Integer> transformer1 = InvokerTransformer.invokerTransformer("v%r1|;r{Hd;E");
      // Undeclared exception!
      try { 
        TransformedSortedMap.transformedSortedMap((SortedMap<Boolean, Integer>) null, (Transformer<? super Boolean, ? extends Boolean>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeMap<Predicate<Object>, Boolean> treeMap0 = new TreeMap<Predicate<Object>, Boolean>();
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>((Predicate<Object>) null);
      TransformedSortedMap<Predicate<Object>, Boolean> transformedSortedMap0 = new TransformedSortedMap<Predicate<Object>, Boolean>(treeMap0, constantTransformer0, (Transformer<? super Boolean, ? extends Boolean>) null);
      // Undeclared exception!
      try { 
        transformedSortedMap0.tailMap((Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Closure<Object>> transformer0 = InvokerTransformer.invokerTransformer("EQUAL");
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TransformedSortedMap<String, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<String, Object>) treeMap0, (Transformer<? super String, ? extends String>) null, (Transformer<? super Object, ?>) null);
      SortedMap<String, Object> sortedMap0 = transformedSortedMap0.headMap(",h}");
      TransformedSortedMap<String, Object> transformedSortedMap1 = new TransformedSortedMap<String, Object>(sortedMap0, (Transformer<? super String, ? extends String>) null, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap1.tailMap(",h}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(identityPredicate0);
      TreeMap<Predicate<Object>, Predicate<Object>> treeMap0 = new TreeMap<Predicate<Object>, Predicate<Object>>();
      TransformedSortedMap<Predicate<Object>, Predicate<Object>> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Predicate<Object>, Predicate<Object>>) treeMap0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) constantTransformer0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.tailMap(identityPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.IdentityPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeMap<Integer, Integer> treeMap0 = new TreeMap<Integer, Integer>();
      Integer integer0 = new Integer(978);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Transformer<Object, Integer>[] transformerArray0 = (Transformer<Object, Integer>[]) Array.newInstance(Transformer.class, 8);
      SwitchTransformer<Object, Integer> switchTransformer0 = new SwitchTransformer<Object, Integer>(predicateArray0, transformerArray0, transformerArray0[4]);
      TransformedSortedMap<Integer, Integer> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Integer, Integer>) treeMap0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0, (Transformer<? super Integer, ? extends Integer>) switchTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".EY}[W|");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer(".EY}[W|", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(andPredicate0);
      TransformedSortedMap<String, Predicate<Object>> transformedSortedMap0 = new TransformedSortedMap<String, Predicate<Object>>(treeMap0, transformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap("k", ".EY}[W|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Transformer<String, Integer>, Predicate<Object>> treeMap0 = new TreeMap<Transformer<String, Integer>, Predicate<Object>>();
      Transformer<Transformer<String, Integer>, Transformer<String, Integer>> transformer0 = NOPTransformer.nopTransformer();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Transformer<Object, Predicate<Object>> transformer1 = ConstantTransformer.constantTransformer(predicate0);
      TransformedSortedMap<Transformer<String, Integer>, Predicate<Object>> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Transformer<String, Integer>, Predicate<Object>>) treeMap0, (Transformer<? super Transformer<String, Integer>, ? extends Transformer<String, Integer>>) transformer0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      TreeMap<String, Integer> treeMap1 = new TreeMap<String, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>(treeMap1);
      Transformer<String, Integer> transformer2 = MapTransformer.mapTransformer((Map<? super String, ? extends Integer>) hashMap0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.subMap(transformer2, transformer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.MapTransformer cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeMap<Transformer<String, Integer>, Predicate<Object>> treeMap0 = new TreeMap<Transformer<String, Integer>, Predicate<Object>>();
      Transformer<Object, Transformer<String, Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedSortedMap<Transformer<String, Integer>, Predicate<Object>> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<Transformer<String, Integer>, Predicate<Object>>) treeMap0, (Transformer<? super Transformer<String, Integer>, ? extends Transformer<String, Integer>>) transformer0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      // Undeclared exception!
      try { 
        transformedSortedMap0.headMap((Transformer<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeMap<Object, Predicate<Object>> treeMap0 = new TreeMap<Object, Predicate<Object>>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, Predicate<Object>> transformer1 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedMap<Object, Predicate<Object>> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Object, Predicate<Object>>) treeMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      // Undeclared exception!
      try { 
        transformedSortedMap0.headMap(transformer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.ExceptionTransformer cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Factory<String> factory0 = ConstantFactory.constantFactory("The predicate and transformer arrays must be the same size");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      TransformedSortedMap<String, String> transformedSortedMap0 = null;
      try {
        transformedSortedMap0 = new TransformedSortedMap<String, String>((SortedMap<String, String>) null, transformer0, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Transformer<String, String> transformer0 = NOPTransformer.nopTransformer();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("transformers", "transformers");
      TransformedSortedMap<String, String> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<String, String>) treeMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      assertFalse(transformedSortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer(".EY}[W|");
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Transformer<Object, Boolean> transformer1 = InvokerTransformer.invokerTransformer(".EY}[W|", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer1);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      ConstantTransformer<Object, Predicate<Object>> constantTransformer0 = new ConstantTransformer<Object, Predicate<Object>>(andPredicate0);
      TransformedSortedMap<String, Predicate<Object>> transformedSortedMap0 = new TransformedSortedMap<String, Predicate<Object>>(treeMap0, transformer0, constantTransformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeMap<Integer, Object> treeMap0 = new TreeMap<Integer, Object>();
      TransformedSortedMap<Integer, Object> transformedSortedMap0 = new TransformedSortedMap<Integer, Object>(treeMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super Object, ?>) null);
      Integer integer0 = new Integer((-3497));
      SortedMap<Integer, Object> sortedMap0 = transformedSortedMap0.subMap(integer0, integer0);
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeMap<Closure<Object>, Closure<Object>> treeMap0 = new TreeMap<Closure<Object>, Closure<Object>>();
      Transformer<Object, Closure<Object>> transformer0 = InvokerTransformer.invokerTransformer("EQUAL");
      TransformedSortedMap<Closure<Object>, Closure<Object>> transformedSortedMap0 = TransformedSortedMap.transformingSortedMap((SortedMap<Closure<Object>, Closure<Object>>) treeMap0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      TransformedSortedMap<String, Object> transformedSortedMap0 = TransformedSortedMap.transformedSortedMap((SortedMap<String, Object>) treeMap0, (Transformer<? super String, ? extends String>) null, (Transformer<? super Object, ?>) null);
      SortedMap<String, Object> sortedMap0 = transformedSortedMap0.tailMap(",h}");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-494));
      TreeMap<String, Integer> treeMap0 = new TreeMap<String, Integer>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      TransformedSortedMap<String, Integer> transformedSortedMap0 = new TransformedSortedMap<String, Integer>(treeMap0, invokerTransformer0, factoryTransformer0);
      Comparator<? super String> comparator0 = transformedSortedMap0.comparator();
      assertNull(comparator0);
  }
}
