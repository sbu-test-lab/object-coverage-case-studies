/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 04 14:50:01 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.graph.AbstractGraphBuilder;
import com.google.common.graph.DirectedGraphConnections;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.UndirectedGraphConnections;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.sql.SQLTransientConnectionException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class StandardMutableValueGraph_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<String, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<String, Integer>(graphBuilder0);
      EndpointPair<String> endpointPair0 = EndpointPair.ordered("value", ";TeQ4EFxy)n#&sNX(");
      Integer integer0 = standardMutableValueGraph0.removeEdge(endpointPair0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableValueGraph<EndpointPair<Integer>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<EndpointPair<Integer>, Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.removeNode((EndpointPair<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableValueGraph<String, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<String, Integer>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.removeEdge((String) null, "node");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeU
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableValueGraph<Object, EndpointPair<String>> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, EndpointPair<String>>(networkBuilder0);
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) networkBuilder0, (Object) networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.removeEdge(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("A`[[!", "value", 0);
      StandardMutableValueGraph<Comparable<Locale.Category>, SQLTransientConnectionException> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Locale.Category>, SQLTransientConnectionException>(graphBuilder0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.putEdgeValue((Comparable<Locale.Category>) locale_Category0, (Comparable<Locale.Category>) null, sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeV
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<String, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<String, Integer>(graphBuilder0);
      Integer integer0 = new Integer(238);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.putEdgeValue((EndpointPair<String>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Integer, EndpointPair<Object>> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, EndpointPair<Object>>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.addNode((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StandardMutableValueGraph<DirectedGraphConnections<String, String>, Locale.Category> standardMutableValueGraph0 = null;
      try {
        standardMutableValueGraph0 = new StandardMutableValueGraph<DirectedGraphConnections<String, String>, Locale.Category>((AbstractGraphBuilder<? super DirectedGraphConnections<String, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      Integer integer0 = new Integer((-708));
      Optional<Integer> optional0 = Optional.of(integer0);
      valueGraphBuilder0.expectedNodeCount = optional0;
      StandardMutableValueGraph<Object, Integer> standardMutableValueGraph0 = null;
      try {
        standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Integer>(valueGraphBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -708
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Integer, EndpointPair<Integer>> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, EndpointPair<Integer>>(graphBuilder0);
      Integer integer0 = new Integer((-3110));
      EndpointPair<Integer> endpointPair0 = standardMutableValueGraph0.removeEdge(integer0, integer0);
      assertNull(endpointPair0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0);
      NetworkBuilder<Object, Integer> networkBuilder1 = NetworkBuilder.from((Network<Object, Integer>) standardNetwork0);
      Integer integer0 = new Integer((-2));
      EndpointPair<Integer> endpointPair0 = EndpointPair.ordered(integer0, integer0);
      StandardMutableValueGraph<EndpointPair<Integer>, Comparable<SQLTransientConnectionException>> standardMutableValueGraph0 = new StandardMutableValueGraph<EndpointPair<Integer>, Comparable<SQLTransientConnectionException>>(networkBuilder1);
      Comparable<SQLTransientConnectionException> comparable0 = (Comparable<SQLTransientConnectionException>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.putEdgeValue(endpointPair0, endpointPair0, comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node com.google.common.graph.EndpointPair$Ordered@0000000012, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<DirectedGraphConnections<Object, Object>, String> standardMutableValueGraph0 = new StandardMutableValueGraph<DirectedGraphConnections<Object, Object>, String>(networkBuilder0);
      StandardMutableValueGraph<Object, Integer> standardMutableValueGraph1 = new StandardMutableValueGraph<Object, Integer>(networkBuilder0);
      Integer integer0 = new Integer(346);
      Integer integer1 = standardMutableValueGraph1.putEdgeValue((Object) networkBuilder0, (Object) standardMutableValueGraph0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<UndirectedGraphConnections<Locale.Category, SQLTransientConnectionException>, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<UndirectedGraphConnections<Locale.Category, SQLTransientConnectionException>, Integer>(graphBuilder0);
      HashMap<Locale.Category, SQLTransientConnectionException> hashMap0 = new HashMap<Locale.Category, SQLTransientConnectionException>();
      UndirectedGraphConnections<Locale.Category, SQLTransientConnectionException> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<Locale.Category, SQLTransientConnectionException>) hashMap0);
      boolean boolean0 = standardMutableValueGraph0.addNode(undirectedGraphConnections0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0);
      NetworkBuilder<Object, Integer> networkBuilder1 = NetworkBuilder.from((Network<Object, Integer>) standardNetwork0);
      StandardMutableValueGraph<Object, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Integer>(networkBuilder1);
      ElementOrder<Object> elementOrder0 = standardMutableValueGraph0.incidentEdgeOrder();
      assertEquals(ElementOrder.Type.UNORDERED, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableValueGraph<Integer, EndpointPair<Integer>> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, EndpointPair<Integer>>(valueGraphBuilder0);
      Integer integer0 = new Integer(2341);
      boolean boolean0 = standardMutableValueGraph0.removeNode(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Integer integer0 = new Integer((-2));
      StandardMutableValueGraph<Integer, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Object>(networkBuilder0);
      Integer integer1 = new Integer(681);
      EndpointPair<Integer> endpointPair0 = EndpointPair.ordered(integer0, integer1);
      Object object0 = standardMutableValueGraph0.putEdgeValue(endpointPair0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      HashMap<Object, GraphConnections<Object, Object>> hashMap0 = new HashMap<Object, GraphConnections<Object, Object>>();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(networkBuilder0, hashMap0, 811L);
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.from((ValueGraph<Object, Object>) standardValueGraph0);
      ValueGraphBuilder<Object, Object> valueGraphBuilder1 = valueGraphBuilder0.allowsSelfLoops(true);
      StandardMutableValueGraph<Comparable<Integer>, Locale.Category> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, Locale.Category>(valueGraphBuilder1);
      Integer integer0 = Integer.getInteger("", 683);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      standardMutableValueGraph0.putEdgeValue((Comparable<Integer>) integer0, (Comparable<Integer>) integer0, locale_Category0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      StandardMutableValueGraph<Locale.Category, Comparable<Locale.Category>> standardMutableValueGraph0 = new StandardMutableValueGraph<Locale.Category, Comparable<Locale.Category>>(networkBuilder0);
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.unordered(locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.putEdgeValue(endpointPair0, (Comparable<Locale.Category>) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.util.Locale$Category@0000000008, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableValueGraph<Comparable<Integer>, String> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<Integer>, String>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.removeEdge((EndpointPair<Comparable<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
