/*
 * This file was automatically generated by EvoSuite
 * Fri Jan 01 14:09:44 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.graph.AbstractGraphBuilder;
import com.google.common.graph.BaseGraph;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class StandardMutableGraph_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      Integer integer0 = new Integer((-1743));
      standardMutableGraph0.addNode(integer0);
      boolean boolean0 = standardMutableGraph0.removeNode(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      boolean boolean0 = standardMutableGraph0.removeNode("com.google.common.hash.Funnels$SequentialFunnel");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Optional<Locale.Category>> standardMutableGraph0 = new StandardMutableGraph<Optional<Locale.Category>>(networkBuilder0);
      BaseGraph<Optional<Locale.Category>> baseGraph0 = standardMutableGraph0.delegate();
      assertNotNull(baseGraph0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      boolean boolean0 = standardMutableGraph0.putEdge("CharMatcher.javaLetterOrDigit()", "");
      assertTrue(boolean0);
      
      boolean boolean1 = standardMutableGraph0.addNode("CharMatcher.javaLetterOrDigit()");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(graphBuilder0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        standardMutableGraph0.removeEdge(object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeV
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(graphBuilder0);
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.from((ValueGraph<Object, Object>) standardValueGraph0);
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.removeEdge((EndpointPair<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(graphBuilder0);
      Integer integer0 = new Integer(117);
      Object object0 = new Object();
      EndpointPair<Object> endpointPair0 = EndpointPair.unordered((Object) integer0, object0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.removeEdge(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.putEdge((Object) "{+0{_y$]O?c?L%M<", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // nodeV
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.putEdge(integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.lang.Integer@0000000008, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Comparable<String>, Object> standardMutableNetwork0 = new StandardMutableNetwork<Comparable<String>, Object>(networkBuilder0);
      ElementOrder<Object> elementOrder0 = standardMutableNetwork0.edgeOrder();
      networkBuilder0.incidentEdgeOrder = elementOrder0;
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.putEdge("CharMatcher.javaLetterOrDigit()", "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // INSERTION
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(valueGraphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.putEdge((EndpointPair<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.addNode((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StandardMutableGraph<Integer> standardMutableGraph0 = null;
      try {
        standardMutableGraph0 = new StandardMutableGraph<Integer>((AbstractGraphBuilder<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, String> standardValueGraph0 = new StandardValueGraph<Object, String>(graphBuilder0);
      ValueGraphBuilder<Object, String> valueGraphBuilder0 = ValueGraphBuilder.from((ValueGraph<Object, String>) standardValueGraph0);
      ValueGraphBuilder<Object, String> valueGraphBuilder1 = valueGraphBuilder0.allowsSelfLoops(true);
      Integer integer0 = new Integer((-252));
      Optional<Integer> optional0 = Optional.of(integer0);
      valueGraphBuilder1.expectedNodeCount = optional0;
      StandardMutableGraph<Object> standardMutableGraph0 = null;
      try {
        standardMutableGraph0 = new StandardMutableGraph<Object>(valueGraphBuilder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -252
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      boolean boolean0 = standardMutableGraph0.removeEdge("Q;[PF,{sW>)fc[@i", "Q;[PF,{sW>)fc[@i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      networkBuilder0.allowsSelfLoops(true);
      StandardMutableGraph<Optional<Object>> standardMutableGraph0 = new StandardMutableGraph<Optional<Object>>(networkBuilder0);
      Optional<Object> optional0 = Optional.fromNullable((Object) networkBuilder0);
      boolean boolean0 = standardMutableGraph0.putEdge(optional0, optional0);
      boolean boolean1 = standardMutableGraph0.removeEdge(optional0, optional0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      EndpointPair<String> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, "&", "K[I,vg0Lq7}Fud?4e");
      boolean boolean0 = standardMutableGraph0.putEdge(endpointPair0);
      assertTrue(boolean0);
      
      boolean boolean1 = standardMutableGraph0.putEdge("&", "K[I,vg0Lq7}Fud?4e");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      networkBuilder0.allowsSelfLoops(true);
      StandardMutableGraph<Optional<String>> standardMutableGraph0 = new StandardMutableGraph<Optional<String>>(networkBuilder0);
      Optional<String> optional0 = Optional.absent();
      EndpointPair<Optional<String>> endpointPair0 = EndpointPair.ordered(optional0, optional0);
      boolean boolean0 = standardMutableGraph0.putEdge(endpointPair0);
      boolean boolean1 = standardMutableGraph0.removeEdge(endpointPair0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(networkBuilder0);
      EndpointPair<String> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, "&", "K[I,vg0Lq7}Fud?4e");
      boolean boolean0 = standardMutableGraph0.putEdge(endpointPair0);
      assertTrue(boolean0);
      
      boolean boolean1 = standardMutableGraph0.putEdge(endpointPair0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.removeNode((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // node
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<Integer> standardMutableGraph0 = new StandardMutableGraph<Integer>(networkBuilder0);
      Integer integer0 = new Integer(0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Graph<?>) standardMutableGraph0, integer0, integer0);
      // Undeclared exception!
      try { 
        standardMutableGraph0.putEdge(endpointPair0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.lang.Integer@0000000019, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      EndpointPair<String> endpointPair0 = EndpointPair.ordered("\"TU{ +", "");
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(graphBuilder0);
      boolean boolean0 = standardMutableGraph0.removeEdge(endpointPair0);
      assertFalse(boolean0);
  }
}
