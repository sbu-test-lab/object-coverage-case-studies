/*
 * This file was automatically generated by EvoSuite
 * Sat Jan 09 14:30:58 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.EnumElementValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class EnumElementValue_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 2165, constantPool0);
      int int0 = enumElementValue0.getValueIndex();
      assertEquals(2165, int0);
      assertEquals(101, enumElementValue0.getTypeIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-159), (-2368), (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumValueString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-159), (-2368), (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

/* manully deleted because of junit assert 
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-983), (-983), (ConstantPool) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      enumElementValue0.dump(dataOutputStream0);
      assertEquals("e\u00FC)\u00FC)", byteArrayOutputStream0.toString());
  }
*/

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 0, 101, (ConstantPool) null);
      int int0 = enumElementValue0.getTypeIndex();
      assertEquals(101, enumElementValue0.getValueIndex());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-6), 101, (ConstantPool) null);
      int int0 = enumElementValue0.getTypeIndex();
      assertEquals((-6), int0);
      assertEquals(101, enumElementValue0.getValueIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-2448), 101, (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumTypeString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, (-159), (-2368), (ConstantPool) null);
      // Undeclared exception!
      try { 
        enumElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        enumElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = null;
      try {
        enumElementValue0 = new EnumElementValue((-351), (-351), (-351), constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type enum can be built with this ctor - type specified: -351
         //
         verifyException("org.apache.bcel.classfile.EnumElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, constantPool0);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumTypeString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 101. Constant pool size is: 10
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, constantPool0);
      // Undeclared exception!
      try { 
        enumElementValue0.getEnumValueString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 101. Constant pool size is: 10
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, (ConstantPool) null);
      int int0 = enumElementValue0.getTypeIndex();
      assertEquals(101, int0);
      assertEquals(101, enumElementValue0.getValueIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EnumElementValue enumElementValue0 = new EnumElementValue(101, 101, 101, constantPool0);
      // Undeclared exception!
      try { 
        enumElementValue0.stringifyValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 101. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }
}
