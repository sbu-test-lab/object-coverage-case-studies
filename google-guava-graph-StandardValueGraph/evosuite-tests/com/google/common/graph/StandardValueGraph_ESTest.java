/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 04 14:43:55 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.graph.AbstractGraphBuilder;
import com.google.common.graph.DirectedGraphConnections;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.NetworkConnections;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardNetwork;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.UndirectedGraphConnections;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class StandardValueGraph_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardValueGraph<Integer, Locale.FilteringMode> standardValueGraph0 = new StandardValueGraph<Integer, Locale.FilteringMode>(networkBuilder0);
      Integer integer0 = new Integer((-346));
      Integer integer1 = new Integer(15);
      boolean boolean0 = standardValueGraph0.hasEdgeConnecting(integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Comparable<String>, EndpointPair<Integer>> standardMutableValueGraph0 = new StandardMutableValueGraph<Comparable<String>, EndpointPair<Integer>>(graphBuilder0);
      boolean boolean0 = standardMutableValueGraph0.isDirected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<TreeMap<Object, Object>, TreeMap<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, Integer>> standardValueGraph0 = new StandardValueGraph<TreeMap<Object, Object>, TreeMap<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, Integer>>(graphBuilder0);
      ImmutableValueGraph<TreeMap<Object, Object>, TreeMap<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, Integer>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<TreeMap<Object, Object>, TreeMap<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, Integer>>) standardValueGraph0);
      TreeMap<Object, Object> treeMap0 = new TreeMap<Object, Object>();
      boolean boolean0 = immutableValueGraph0.hasEdgeConnecting_internal(treeMap0, treeMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<UndirectedGraphConnections<Integer, Integer>, GraphConnections<UndirectedGraphConnections<Integer, Integer>, Object>> treeMap0 = new TreeMap<UndirectedGraphConnections<Integer, Integer>, GraphConnections<UndirectedGraphConnections<Integer, Integer>, Object>>();
      StandardValueGraph<UndirectedGraphConnections<Integer, Integer>, Object> standardValueGraph0 = new StandardValueGraph<UndirectedGraphConnections<Integer, Integer>, Object>(graphBuilder0, treeMap0, 0L);
      ImmutableValueGraph<UndirectedGraphConnections<Integer, Integer>, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<UndirectedGraphConnections<Integer, Integer>, Object>) standardValueGraph0);
      ElementOrder<Integer> elementOrder0 = ElementOrder.unordered();
      UndirectedGraphConnections<Integer, Integer> undirectedGraphConnections0 = UndirectedGraphConnections.of(elementOrder0);
      Object object0 = immutableValueGraph0.edgeValueOrDefault_internal(undirectedGraphConnections0, undirectedGraphConnections0, graphBuilder0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      HashMap<Integer, GraphConnections<Integer, EndpointPair<Integer>>> hashMap0 = new HashMap<Integer, GraphConnections<Integer, EndpointPair<Integer>>>();
      StandardValueGraph<Integer, EndpointPair<Integer>> standardValueGraph0 = new StandardValueGraph<Integer, EndpointPair<Integer>>(graphBuilder0, hashMap0, 0);
      Integer integer0 = new Integer((-1827));
      EndpointPair<Integer> endpointPair0 = EndpointPair.unordered(integer0, integer0);
      EndpointPair<Integer> endpointPair1 = standardValueGraph0.edgeValueOrDefault(endpointPair0, endpointPair0);
      assertSame(endpointPair0, endpointPair1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0);
      NetworkBuilder<Object, Integer> networkBuilder1 = NetworkBuilder.from((Network<Object, Integer>) standardNetwork0);
      StandardMutableValueGraph<DirectedGraphConnections<Integer, String>, String> standardMutableValueGraph0 = new StandardMutableValueGraph<DirectedGraphConnections<Integer, String>, String>(networkBuilder1);
      long long0 = standardMutableValueGraph0.edgeCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<DirectedGraphConnections<Integer, Object>, GraphConnections<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>> treeMap0 = new TreeMap<DirectedGraphConnections<Integer, Object>, GraphConnections<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>>();
      StandardValueGraph<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode> standardValueGraph0 = new StandardValueGraph<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>(graphBuilder0, treeMap0, 3058L);
      long long0 = standardValueGraph0.edgeCount();
      assertEquals(3058L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      TreeMap<Object, NetworkConnections<Object, Integer>> treeMap0 = new TreeMap<Object, NetworkConnections<Object, Integer>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      StandardNetwork<Object, Integer> standardNetwork0 = new StandardNetwork<Object, Integer>(networkBuilder0, treeMap0, hashMap0);
      NetworkBuilder<Object, Integer> networkBuilder1 = NetworkBuilder.from((Network<Object, Integer>) standardNetwork0);
      networkBuilder1.allowsSelfLoops(true);
      StandardMutableValueGraph<UndirectedGraphConnections<Object, Object>, Locale.FilteringMode> standardMutableValueGraph0 = new StandardMutableValueGraph<UndirectedGraphConnections<Object, Object>, Locale.FilteringMode>(networkBuilder1);
      boolean boolean0 = standardMutableValueGraph0.allowsSelfLoops();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.predecessors((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<String, GraphConnections<Object, Integer>> standardValueGraph0 = new StandardValueGraph<String, GraphConnections<Object, Integer>>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.hasEdgeConnecting((EndpointPair<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<Object, GraphConnections<Object, Object>> treeMap0 = new TreeMap<Object, GraphConnections<Object, Object>>();
      StandardValueGraph<Object, Object> standardValueGraph0 = new StandardValueGraph<Object, Object>(graphBuilder0, treeMap0, 2L);
      // Undeclared exception!
      try { 
        standardValueGraph0.containsNode(treeMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeMap cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableValueGraph<Object, TreeMap<String, Locale.FilteringMode>> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, TreeMap<String, Locale.FilteringMode>>(graphBuilder0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.checkedConnections(locale_FilteringMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node IGNORE_EXTENDED_RANGES is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Object, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, Object>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.adjacentNodes((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StandardValueGraph<Comparable<String>, EndpointPair<Object>> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Comparable<String>, EndpointPair<Object>>((AbstractGraphBuilder<? super Comparable<String>>) null, (Map<Comparable<String>, GraphConnections<Comparable<String>, EndpointPair<Object>>>) null, 446L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Optional<EndpointPair<String>>, Locale.FilteringMode> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<Optional<EndpointPair<String>>, Locale.FilteringMode>(graphBuilder0, (Map<Optional<EndpointPair<String>>, GraphConnections<Optional<EndpointPair<String>>, Locale.FilteringMode>>) null, 105L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      TreeMap<EndpointPair<String>, GraphConnections<EndpointPair<String>, Locale.FilteringMode>> treeMap0 = new TreeMap<EndpointPair<String>, GraphConnections<EndpointPair<String>, Locale.FilteringMode>>();
      StandardValueGraph<EndpointPair<String>, Locale.FilteringMode> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<EndpointPair<String>, Locale.FilteringMode>(networkBuilder0, treeMap0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not true that java.lang.Long@0000000007 is non-negative.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<DirectedGraphConnections<Integer, Object>, GraphConnections<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>> treeMap0 = new TreeMap<DirectedGraphConnections<Integer, Object>, GraphConnections<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>>();
      StandardValueGraph<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode> standardValueGraph0 = new StandardValueGraph<DirectedGraphConnections<Integer, Object>, Locale.FilteringMode>(graphBuilder0, treeMap0, 3058L);
      Set<DirectedGraphConnections<Integer, Object>> set0 = standardValueGraph0.nodes();
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardValueGraph<TreeMap<Object, Locale.FilteringMode>, Optional<EndpointPair<String>>> standardValueGraph0 = new StandardValueGraph<TreeMap<Object, Locale.FilteringMode>, Optional<EndpointPair<String>>>(networkBuilder0);
      ElementOrder<TreeMap<Object, Locale.FilteringMode>> elementOrder0 = standardValueGraph0.nodeOrder();
      assertEquals(ElementOrder.Type.INSERTION, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<DirectedGraphConnections<Object, Integer>, DirectedGraphConnections<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>>> standardValueGraph0 = new StandardValueGraph<DirectedGraphConnections<Object, Integer>, DirectedGraphConnections<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>>>(graphBuilder0);
      StandardMutableValueGraph<Object, TreeMap<Object, Locale.FilteringMode>> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, TreeMap<Object, Locale.FilteringMode>>(graphBuilder0);
      ElementOrder<Object> elementOrder0 = standardMutableValueGraph0.incidentEdgeOrder();
      DirectedGraphConnections<Object, Integer> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.predecessors(directedGraphConnections0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node com.google.common.graph.DirectedGraphConnections@8 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<DirectedGraphConnections<String, String>, GraphConnections<String, Object>> standardMutableValueGraph0 = new StandardMutableValueGraph<DirectedGraphConnections<String, String>, GraphConnections<String, Object>>(graphBuilder0);
      boolean boolean0 = standardMutableValueGraph0.allowsSelfLoops();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableValueGraph<UndirectedGraphConnections<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, EndpointPair<String>>, Comparable<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>>> standardMutableValueGraph0 = new StandardMutableValueGraph<UndirectedGraphConnections<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>, EndpointPair<String>>, Comparable<GraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>>>>(networkBuilder0);
      boolean boolean0 = standardMutableValueGraph0.isDirected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableValueGraph<Integer, Integer> standardMutableValueGraph0 = new StandardMutableValueGraph<Integer, Integer>(graphBuilder0);
      Integer integer0 = new Integer((-491));
      EndpointPair<Integer> endpointPair0 = EndpointPair.ordered(integer0, integer0);
      boolean boolean0 = standardMutableValueGraph0.hasEdgeConnecting(endpointPair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      HashMap<String, GraphConnections<String, Integer>> hashMap0 = new HashMap<String, GraphConnections<String, Integer>>();
      StandardValueGraph<String, Integer> standardValueGraph0 = new StandardValueGraph<String, Integer>(graphBuilder0, hashMap0, 0L);
      // Undeclared exception!
      try { 
        standardValueGraph0.incidentEdges("isDirected: false, allowsSelfLoops: false, nodes: [], edges: {}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node isDirected: false, allowsSelfLoops: false, nodes: [], edges: {} is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      TreeMap<Object, GraphConnections<Object, String>> treeMap0 = new TreeMap<Object, GraphConnections<Object, String>>();
      StandardValueGraph<Object, String> standardValueGraph0 = new StandardValueGraph<Object, String>(graphBuilder0, treeMap0, 4568L);
      ValueGraphBuilder<Object, String> valueGraphBuilder0 = ValueGraphBuilder.from((ValueGraph<Object, String>) standardValueGraph0);
      StandardMutableValueGraph<TreeMap<String, Integer>, EndpointPair<Locale.FilteringMode>> standardMutableValueGraph0 = new StandardMutableValueGraph<TreeMap<String, Integer>, EndpointPair<Locale.FilteringMode>>(valueGraphBuilder0);
      TreeMap<String, Integer> treeMap1 = new TreeMap<String, Integer>();
      boolean boolean0 = standardMutableValueGraph0.containsNode(treeMap1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      HashMap<EndpointPair<Integer>, GraphConnections<EndpointPair<Integer>, String>> hashMap0 = new HashMap<EndpointPair<Integer>, GraphConnections<EndpointPair<Integer>, String>>();
      StandardValueGraph<EndpointPair<Integer>, String> standardValueGraph0 = new StandardValueGraph<EndpointPair<Integer>, String>(graphBuilder0, hashMap0, 0L);
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(graphBuilder0);
      ImmutableGraph<Object> immutableGraph0 = ImmutableGraph.copyOf((Graph<Object>) standardMutableGraph0);
      Integer integer0 = new Integer(0);
      EndpointPair<Integer> endpointPair0 = EndpointPair.of((Graph<?>) immutableGraph0, integer0, integer0);
      EndpointPair<EndpointPair<Integer>> endpointPair1 = EndpointPair.unordered(endpointPair0, endpointPair0);
      // Undeclared exception!
      try { 
        standardValueGraph0.edgeValueOrDefault(endpointPair1, "com.google.common.base.Converter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mismatch: unordered endpoints cannot be used with directed graphs
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.directed();
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(networkBuilder0);
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.from((Graph<Object>) standardMutableGraph0);
      StandardMutableValueGraph<Object, EndpointPair<String>> standardMutableValueGraph0 = new StandardMutableValueGraph<Object, EndpointPair<String>>(graphBuilder0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        standardMutableValueGraph0.successors(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node java.lang.Object@3dcde189 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, UndirectedGraphConnections<String, Locale.FilteringMode>> standardValueGraph0 = new StandardValueGraph<Object, UndirectedGraphConnections<String, Locale.FilteringMode>>(graphBuilder0);
      ElementOrder<EndpointPair<Object>> elementOrder0 = ElementOrder.unordered();
      DirectedGraphConnections<EndpointPair<Object>, DirectedGraphConnections<String, Integer>> directedGraphConnections0 = DirectedGraphConnections.of(elementOrder0);
      Object object0 = new Object();
      HashMap<String, Locale.FilteringMode> hashMap0 = new HashMap<String, Locale.FilteringMode>();
      UndirectedGraphConnections<String, Locale.FilteringMode> undirectedGraphConnections0 = UndirectedGraphConnections.ofImmutable((Map<String, Locale.FilteringMode>) hashMap0);
      UndirectedGraphConnections<String, Locale.FilteringMode> undirectedGraphConnections1 = standardValueGraph0.edgeValueOrDefault((Object) directedGraphConnections0, object0, undirectedGraphConnections0);
      assertSame(undirectedGraphConnections1, undirectedGraphConnections0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardValueGraph<Object, UndirectedGraphConnections<String, Locale.FilteringMode>> standardValueGraph0 = new StandardValueGraph<Object, UndirectedGraphConnections<String, Locale.FilteringMode>>(graphBuilder0);
      // Undeclared exception!
      try { 
        standardValueGraph0.adjacentNodes(graphBuilder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Node com.google.common.graph.GraphBuilder@3 is not an element of this graph.
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StandardValueGraph<String, Integer> standardValueGraph0 = null;
      try {
        standardValueGraph0 = new StandardValueGraph<String, Integer>((AbstractGraphBuilder<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }
}
