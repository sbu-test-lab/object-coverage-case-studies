/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 10 15:37:45 GMT 2021
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.apache.bcel.classfile.ArrayElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ElementValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

public class ArrayElementValue_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, constantPool0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        arrayElementValue0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, constantPool0);
      ElementValue[] elementValueArray0 = arrayElementValue0.getElementValuesArray();
      assertNull(elementValueArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, constantPool0);
      // Undeclared exception!
      try { 
        arrayElementValue0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = new ArrayElementValue(91, (ElementValue[]) null, constantPool0);
      // Undeclared exception!
      try { 
        arrayElementValue0.getElementValuesArraySize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValue[] elementValueArray0 = new ElementValue[11];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue((byte)91, elementValueArray0, constantPool0);
      // Undeclared exception!
      try { 
        arrayElementValue0.stringifyValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ArrayElementValue arrayElementValue0 = null;
      try {
        arrayElementValue0 = new ArrayElementValue((-828), (ElementValue[]) null, constantPool0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Only element values of type array can be built with this ctor - type specified: -828
         //
         verifyException("org.apache.bcel.classfile.ArrayElementValue", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValue[] elementValueArray0 = new ElementValue[11];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue((byte)91, elementValueArray0, constantPool0);
      String string0 = arrayElementValue0.toString();
      assertEquals("{null,null,null,null,null,null,null,null,null,null,null}", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValue[] elementValueArray0 = new ElementValue[11];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue((byte)91, elementValueArray0, constantPool0);
      ElementValue[] elementValueArray1 = arrayElementValue0.getElementValuesArray();
      assertSame(elementValueArray1, elementValueArray0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ElementValue[] elementValueArray0 = new ElementValue[11];
      ArrayElementValue arrayElementValue0 = new ArrayElementValue((byte)91, elementValueArray0, constantPool0);
      int int0 = arrayElementValue0.getElementValuesArraySize();
      assertEquals(11, int0);
  }
}
