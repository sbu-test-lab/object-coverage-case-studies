/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 07 15:40:25 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.EndpointPair;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.MutableValueGraph;
import com.google.common.graph.Network;
import com.google.common.graph.NetworkBuilder;
import com.google.common.graph.StandardMutableNetwork;
import com.google.common.graph.StandardMutableValueGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import com.google.common.graph.ValueGraphBuilder;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class ImmutableValueGraph_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<Integer, Integer> standardValueGraph0 = new StandardValueGraph<Integer, Integer>(valueGraphBuilder0);
      ValueGraphBuilder<Integer, Integer> valueGraphBuilder1 = ValueGraphBuilder.from((ValueGraph<Integer, Integer>) standardValueGraph0);
      ImmutableValueGraph.Builder<Integer, Integer> immutableValueGraph_Builder0 = new ImmutableValueGraph.Builder<Integer, Integer>(valueGraphBuilder1);
      Integer integer0 = new Integer(5);
      Integer integer1 = new Integer(5);
      // Undeclared exception!
      try { 
        immutableValueGraph_Builder0.putEdgeValue(integer0, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.lang.Integer@0000000017, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableValueGraph.copyOf((ValueGraph<Integer, EndpointPair<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.ValueGraphBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImmutableValueGraph.copyOf((ImmutableValueGraph<String, EndpointPair<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardValueGraph<Integer, Locale.Category> standardValueGraph0 = new StandardValueGraph<Integer, Locale.Category>(networkBuilder0);
      ImmutableValueGraph<Integer, Locale.Category> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Locale.Category>) standardValueGraph0);
      ImmutableValueGraph<Integer, Locale.Category> immutableValueGraph1 = ImmutableValueGraph.copyOf((ValueGraph<Integer, Locale.Category>) immutableValueGraph0);
      assertSame(immutableValueGraph1, immutableValueGraph0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      StandardMutableValueGraph<EndpointPair<Locale.Category>, Object> standardMutableValueGraph0 = new StandardMutableValueGraph<EndpointPair<Locale.Category>, Object>(valueGraphBuilder0);
      ImmutableValueGraph<EndpointPair<Locale.Category>, Object> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<EndpointPair<Locale.Category>, Object>) standardMutableValueGraph0);
      ElementOrder<EndpointPair<Locale.Category>> elementOrder0 = immutableValueGraph0.incidentEdgeOrder();
      assertEquals(ElementOrder.Type.STABLE, elementOrder0.type());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      MutableValueGraph<Comparable<String>, Comparable<Object>> mutableValueGraph0 = valueGraphBuilder0.build();
      ImmutableValueGraph<Comparable<String>, Comparable<Object>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Comparable<String>, Comparable<Object>>) mutableValueGraph0);
      ImmutableValueGraph<Comparable<String>, Comparable<Object>> immutableValueGraph1 = ImmutableValueGraph.copyOf(immutableValueGraph0);
      assertSame(immutableValueGraph0, immutableValueGraph1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.directed();
      MutableValueGraph<Comparable<String>, Comparable<Object>> mutableValueGraph0 = valueGraphBuilder0.build();
      ImmutableValueGraph<Comparable<String>, Comparable<Object>> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Comparable<String>, Comparable<Object>>) mutableValueGraph0);
      ImmutableGraph<Comparable<String>> immutableGraph0 = immutableValueGraph0.asGraph();
      assertNotNull(immutableGraph0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ValueGraphBuilder<Object, Object> valueGraphBuilder0 = ValueGraphBuilder.undirected();
      StandardValueGraph<Locale.Category, Comparable<Locale.Category>> standardValueGraph0 = new StandardValueGraph<Locale.Category, Comparable<Locale.Category>>(valueGraphBuilder0);
      ValueGraphBuilder<Locale.Category, Comparable<Locale.Category>> valueGraphBuilder1 = ValueGraphBuilder.from((ValueGraph<Locale.Category, Comparable<Locale.Category>>) standardValueGraph0);
      ImmutableValueGraph.Builder<Locale.Category, Comparable<Locale.Category>> immutableValueGraph_Builder0 = new ImmutableValueGraph.Builder<Locale.Category, Comparable<Locale.Category>>(valueGraphBuilder1);
      NetworkBuilder<Object, Object> networkBuilder0 = NetworkBuilder.undirected();
      StandardMutableNetwork<Object, Locale.Category> standardMutableNetwork0 = new StandardMutableNetwork<Object, Locale.Category>(networkBuilder0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EndpointPair<Locale.Category> endpointPair0 = EndpointPair.of((Network<?, ?>) standardMutableNetwork0, locale_Category0, locale_Category0);
      // Undeclared exception!
      try { 
        immutableValueGraph_Builder0.putEdgeValue(endpointPair0, (Comparable<Locale.Category>) locale_Category0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add self-loop edge on node java.util.Locale$Category@0000000025, as self-loops are not allowed. To construct a graph that allows self-loops, call allowsSelfLoops(true) on the Builder.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }
}
