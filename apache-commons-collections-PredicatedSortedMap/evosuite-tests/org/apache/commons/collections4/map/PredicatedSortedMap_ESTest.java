/*
 * This file was automatically generated by EvoSuite
 * Mon Jan 11 14:04:07 GMT 2021
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.map.PredicatedSortedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class PredicatedSortedMap_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TreeMap<String, InstanceofPredicate> treeMap0 = new TreeMap<String, InstanceofPredicate>();
      PredicatedSortedMap<String, InstanceofPredicate> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, InstanceofPredicate>) treeMap0, (Predicate<? super String>) transformerPredicate0, (Predicate<? super InstanceofPredicate>) null);
      SortedMap<String, InstanceofPredicate> sortedMap0 = predicatedSortedMap0.tailMap("NXQ");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      TreeMap<Integer, TreeMap<String, String>> treeMap0 = new TreeMap<Integer, TreeMap<String, String>>();
      PredicatedSortedMap<Integer, TreeMap<String, String>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Integer, TreeMap<String, String>>) treeMap0, (Predicate<? super Integer>) equalPredicate0, (Predicate<? super TreeMap<String, String>>) null);
      SortedMap<Integer, TreeMap<String, String>> sortedMap0 = predicatedSortedMap0.headMap(integer0);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      PredicatedSortedMap<String, Predicate<Object>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Predicate<Object>>) treeMap0, (Predicate<? super String>) null, (Predicate<? super Predicate<Object>>) null);
      treeMap0.put("NXQ", (Predicate<Object>) null);
      String string0 = predicatedSortedMap0.lastKey();
      assertEquals("NXQ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeMap<Predicate<Object>, String> treeMap0 = new TreeMap<Predicate<Object>, String>();
      PredicatedSortedMap<Predicate<Object>, String> predicatedSortedMap0 = new PredicatedSortedMap<Predicate<Object>, String>(treeMap0, (Predicate<? super Predicate<Object>>) null, (Predicate<? super String>) null);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedSortedMap<Predicate<Object>, String> predicatedSortedMap1 = new PredicatedSortedMap<Predicate<Object>, String>(predicatedSortedMap0, predicate0, (Predicate<? super String>) null);
      SortedMap<Predicate<Object>, String> sortedMap0 = predicatedSortedMap1.getSortedMap();
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeMap<InstanceofPredicate, Boolean> treeMap0 = new TreeMap<InstanceofPredicate, Boolean>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) treeMap0, comparator0);
      TreeMap<Integer, Object> treeMap1 = new TreeMap<Integer, Object>();
      PredicatedSortedMap<Integer, Object> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Integer, Object>) treeMap1, (Predicate<? super Integer>) predicate0, (Predicate<? super Object>) predicate0);
      Integer integer0 = new Integer((-3048));
      predicatedSortedMap0.putIfAbsent(integer0, predicate0);
      Integer integer1 = predicatedSortedMap0.firstKey();
      assertEquals((-3048), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeMap<Boolean, InstanceofPredicate> treeMap0 = new TreeMap<Boolean, InstanceofPredicate>(comparator0);
      PredicatedSortedMap<Boolean, InstanceofPredicate> predicatedSortedMap0 = new PredicatedSortedMap<Boolean, InstanceofPredicate>(treeMap0, predicate0, predicate0);
      Comparator<? super Boolean> comparator1 = predicatedSortedMap0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TreeMap<String, InstanceofPredicate> treeMap0 = new TreeMap<String, InstanceofPredicate>();
      PredicatedSortedMap<String, InstanceofPredicate> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, InstanceofPredicate>) treeMap0, (Predicate<? super String>) transformerPredicate0, (Predicate<? super InstanceofPredicate>) transformerPredicate0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      treeMap0.put("r>7Y#+_", instanceofPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.tailMap("NXQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      TreeMap<InstanceofPredicate, Transformer<Integer, Object>> treeMap0 = new TreeMap<InstanceofPredicate, Transformer<Integer, Object>>();
      PredicatedSortedMap<InstanceofPredicate, Transformer<Integer, Object>> predicatedSortedMap0 = new PredicatedSortedMap<InstanceofPredicate, Transformer<Integer, Object>>(treeMap0, predicate0, predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.tailMap((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeMap<InstanceofPredicate, Predicate<Object>> treeMap0 = new TreeMap<InstanceofPredicate, Predicate<Object>>();
      Predicate<InstanceofPredicate> predicate0 = UniquePredicate.uniquePredicate();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(treeMap0, defaultEquator0);
      PredicatedSortedMap<InstanceofPredicate, Predicate<Object>> predicatedSortedMap0 = new PredicatedSortedMap<InstanceofPredicate, Predicate<Object>>(treeMap0, predicate0, equalPredicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.tailMap(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeMap<Integer, Boolean> treeMap0 = new TreeMap<Integer, Boolean>();
      PredicatedSortedMap<Integer, Boolean> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Integer, Boolean>) treeMap0, (Predicate<? super Integer>) null, (Predicate<? super Boolean>) null);
      Integer integer0 = new Integer(1659);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeMap<String, Transformer<Object, Integer>> treeMap0 = new TreeMap<String, Transformer<Object, Integer>>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedSortedMap<String, Transformer<Object, Integer>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Transformer<Object, Integer>>) treeMap0, (Predicate<? super String>) predicate0, (Predicate<? super Transformer<Object, Integer>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap("|`x,y1:)| &(N", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("java.util.TreeMap$NavigableSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(allPredicate0);
      TreeMap<InstanceofPredicate, Predicate<Object>> treeMap0 = new TreeMap<InstanceofPredicate, Predicate<Object>>();
      PredicatedSortedMap<InstanceofPredicate, Predicate<Object>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<InstanceofPredicate, Predicate<Object>>) treeMap0, (Predicate<? super InstanceofPredicate>) allPredicate0, (Predicate<? super Predicate<Object>>) notPredicate0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.subMap(instanceofPredicate0, instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeMap<String, Transformer<Object, Integer>> treeMap0 = new TreeMap<String, Transformer<Object, Integer>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      treeMap0.put("Cannot set value - Predicate rejected it", transformer0);
      // Undeclared exception!
      try { 
        PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Transformer<Object, Integer>>) treeMap0, (Predicate<? super String>) predicate0, (Predicate<? super Transformer<Object, Integer>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        PredicatedSortedMap.predicatedSortedMap((SortedMap<Integer, String>) null, (Predicate<? super Integer>) nullIsFalsePredicate0, (Predicate<? super String>) nullIsFalsePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeMap<Object, Predicate<Object>> treeMap0 = new TreeMap<Object, Predicate<Object>>();
      Integer integer0 = new Integer(0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      treeMap0.put(integer0, equalPredicate0);
      // Undeclared exception!
      try { 
        PredicatedSortedMap.predicatedSortedMap((SortedMap<Object, Predicate<Object>>) treeMap0, (Predicate<? super Object>) equalPredicate0, (Predicate<? super Predicate<Object>>) equalPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add value - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TreeMap<Integer, Transformer<Object, Integer>> treeMap0 = new TreeMap<Integer, Transformer<Object, Integer>>();
      PredicatedSortedMap<Integer, Transformer<Object, Integer>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<Integer, Transformer<Object, Integer>>) treeMap0, (Predicate<? super Integer>) transformerPredicate0, (Predicate<? super Transformer<Object, Integer>>) transformerPredicate0);
      Integer integer0 = new Integer(0);
      Transformer<Object, Integer> transformer1 = InvokerTransformer.invokerTransformer("NXQ");
      treeMap0.put(integer0, transformer1);
      Integer integer1 = new Integer(744);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeMap<Integer, String> treeMap0 = new TreeMap<Integer, String>();
      PredicatedSortedMap<Integer, String> predicatedSortedMap0 = new PredicatedSortedMap<Integer, String>(treeMap0, (Predicate<? super Integer>) null, (Predicate<? super String>) null);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      treeMap0.put("NXQ", transformerPredicate0);
      PredicatedSortedMap<String, Predicate<Object>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Predicate<Object>>) treeMap0, (Predicate<? super String>) null, (Predicate<? super Predicate<Object>>) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      PredicatedSortedMap<String, Predicate<Object>> predicatedSortedMap1 = null;
      try {
        predicatedSortedMap1 = new PredicatedSortedMap<String, Predicate<Object>>(predicatedSortedMap0, transformerPredicate0, nonePredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedSortedMap<Object, Boolean> predicatedSortedMap0 = null;
      try {
        predicatedSortedMap0 = new PredicatedSortedMap<Object, Boolean>((SortedMap<Object, Boolean>) null, (Predicate<? super Object>) null, allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // map
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeMap<String, Transformer<Object, Integer>> treeMap0 = new TreeMap<String, Transformer<Object, Integer>>();
      Integer integer0 = new Integer((-1));
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      treeMap0.putIfAbsent("", factoryTransformer0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      PredicatedSortedMap<String, Transformer<Object, Integer>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Transformer<Object, Integer>>) treeMap0, (Predicate<? super String>) predicate0, (Predicate<? super Transformer<Object, Integer>>) predicate0);
      PredicatedSortedMap<String, Transformer<Object, Integer>> predicatedSortedMap1 = null;
      try {
        predicatedSortedMap1 = new PredicatedSortedMap<String, Transformer<Object, Integer>>(predicatedSortedMap0, predicate0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add key - Predicate rejected it
         //
         verifyException("org.apache.commons.collections4.map.PredicatedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeMap<String, InstanceofPredicate> treeMap0 = new TreeMap<String, InstanceofPredicate>();
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedSortedMap<String, InstanceofPredicate> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, InstanceofPredicate>) treeMap0, (Predicate<? super String>) predicate0, (Predicate<? super InstanceofPredicate>) uniquePredicate0);
      SortedMap<String, InstanceofPredicate> sortedMap0 = predicatedSortedMap0.subMap("e0nx!!?Fsk", "e0nx!!?Fsk");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeMap<Object, String> treeMap0 = new TreeMap<Object, String>();
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      PredicatedSortedMap<Object, String> predicatedSortedMap0 = new PredicatedSortedMap<Object, String>(treeMap0, transformerPredicate0, transformerPredicate0);
      Comparator<? super Object> comparator0 = predicatedSortedMap0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      TreeMap<InstanceofPredicate, Object> treeMap0 = new TreeMap<InstanceofPredicate, Object>();
      PredicatedSortedMap<InstanceofPredicate, Object> predicatedSortedMap0 = new PredicatedSortedMap<InstanceofPredicate, Object>(treeMap0, uniquePredicate0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      TreeMap<String, Predicate<Object>> treeMap0 = new TreeMap<String, Predicate<Object>>();
      PredicatedSortedMap<String, Predicate<Object>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<String, Predicate<Object>>) treeMap0, (Predicate<? super String>) transformerPredicate0, (Predicate<? super Predicate<Object>>) transformerPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      TreeMap<InstanceofPredicate, Predicate<Object>> treeMap0 = new TreeMap<InstanceofPredicate, Predicate<Object>>();
      PredicatedSortedMap<InstanceofPredicate, Predicate<Object>> predicatedSortedMap0 = PredicatedSortedMap.predicatedSortedMap((SortedMap<InstanceofPredicate, Predicate<Object>>) treeMap0, (Predicate<? super InstanceofPredicate>) predicate0, (Predicate<? super Predicate<Object>>) predicate0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        predicatedSortedMap0.headMap(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
