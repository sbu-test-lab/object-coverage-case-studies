/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 07 12:37:30 GMT 2021
 */

package com.google.common.graph;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.graph.ElementOrder;
import com.google.common.graph.Graph;
import com.google.common.graph.GraphBuilder;
import com.google.common.graph.GraphConnections;
import com.google.common.graph.ImmutableGraph;
import com.google.common.graph.ImmutableValueGraph;
import com.google.common.graph.MutableGraph;
import com.google.common.graph.NetworkConnections;
import com.google.common.graph.StandardMutableGraph;
import com.google.common.graph.StandardValueGraph;
import com.google.common.graph.ValueGraph;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class GraphBuilder_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      GraphBuilder<Object> graphBuilder1 = graphBuilder0.allowsSelfLoops(true);
      assertSame(graphBuilder0, graphBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      GraphBuilder<Object> graphBuilder1 = graphBuilder0.copy();
      assertNotSame(graphBuilder1, graphBuilder0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      // Undeclared exception!
      try { 
        graphBuilder0.nodeOrder((ElementOrder<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(graphBuilder0);
      GraphBuilder<String> graphBuilder1 = GraphBuilder.from((Graph<String>) standardMutableGraph0);
      // Undeclared exception!
      try { 
        graphBuilder1.incidentEdgeOrder((ElementOrder<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.GraphBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      graphBuilder0.expectedNodeCount = null;
      // Undeclared exception!
      try { 
        graphBuilder0.immutable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      Integer integer0 = new Integer((-1015));
      Optional<Integer> optional0 = Optional.fromNullable(integer0);
      graphBuilder0.expectedNodeCount = optional0;
      // Undeclared exception!
      try { 
        graphBuilder0.immutable();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // expectedSize cannot be negative but was: -1015
         //
         verifyException("com.google.common.collect.CollectPreconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        GraphBuilder.from((Graph<ElementOrder<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.GraphBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      // Undeclared exception!
      try { 
        graphBuilder0.expectedNodeCount((-1298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not true that java.lang.Integer@0000000004 is non-negative.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      graphBuilder0.incidentEdgeOrder = null;
      // Undeclared exception!
      try { 
        graphBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.graph.StandardMutableValueGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableGraph<NetworkConnections<Object, Comparable<Object>>> standardMutableGraph0 = new StandardMutableGraph<NetworkConnections<Object, Comparable<Object>>>(graphBuilder0);
      ElementOrder<NetworkConnections<Object, Comparable<Object>>> elementOrder0 = standardMutableGraph0.nodeOrder();
      // Undeclared exception!
      try { 
        graphBuilder0.incidentEdgeOrder(elementOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The given elementOrder (com.google.common.graph.ElementOrder@0000000001) is unsupported. incidentEdgeOrder() only supports ElementOrder.unordered() and ElementOrder.stable().
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      ElementOrder<Object> elementOrder0 = ElementOrder.unordered();
      GraphBuilder<Object> graphBuilder1 = graphBuilder0.incidentEdgeOrder(elementOrder0);
      assertSame(graphBuilder1, graphBuilder0);
  }


  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      HashMap<Object, GraphConnections<Object, String>> hashMap0 = new HashMap<Object, GraphConnections<Object, String>>();
      StandardValueGraph<Object, String> standardValueGraph0 = new StandardValueGraph<Object, String>(graphBuilder0, hashMap0, 1841);
      ImmutableValueGraph<Object, String> immutableValueGraph0 = ImmutableValueGraph.copyOf((ValueGraph<Object, String>) standardValueGraph0);
      ElementOrder<Object> elementOrder0 = immutableValueGraph0.incidentEdgeOrder();
      graphBuilder0.incidentEdgeOrder(elementOrder0);
      assertTrue(standardValueGraph0.isDirected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      GraphBuilder<Object> graphBuilder1 = graphBuilder0.nodeOrder(graphBuilder0.incidentEdgeOrder);
      assertSame(graphBuilder1, graphBuilder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      MutableGraph<Object> mutableGraph0 = graphBuilder0.build();
      assertNotNull(mutableGraph0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      GraphBuilder<Object> graphBuilder1 = graphBuilder0.allowsSelfLoops(false);
      StandardMutableGraph<Object> standardMutableGraph0 = new StandardMutableGraph<Object>(graphBuilder1);
      ElementOrder<Object> elementOrder0 = standardMutableGraph0.nodeOrder();
      graphBuilder1.incidentEdgeOrder = elementOrder0;
      StandardMutableGraph<Integer> standardMutableGraph1 = new StandardMutableGraph<Integer>(graphBuilder1);
      // Undeclared exception!
      try { 
        GraphBuilder.from((Graph<Integer>) standardMutableGraph1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The given elementOrder (com.google.common.graph.ElementOrder@0000000001) is unsupported. incidentEdgeOrder() only supports ElementOrder.unordered() and ElementOrder.stable().
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      ImmutableGraph.Builder<Object> immutableGraph_Builder0 = graphBuilder0.immutable();
      assertNotNull(immutableGraph_Builder0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(graphBuilder0);
      ImmutableGraph<String> immutableGraph0 = ImmutableGraph.copyOf((Graph<String>) standardMutableGraph0);
      GraphBuilder<String> graphBuilder1 = GraphBuilder.from((Graph<String>) immutableGraph0);
      GraphBuilder<String> graphBuilder2 = graphBuilder1.expectedNodeCount(2057);
      assertSame(graphBuilder1, graphBuilder2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.directed();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(graphBuilder0);
      assertTrue(standardMutableGraph0.isDirected());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraphBuilder<Object> graphBuilder0 = GraphBuilder.undirected();
      StandardMutableGraph<String> standardMutableGraph0 = new StandardMutableGraph<String>(graphBuilder0);
      assertTrue(!standardMutableGraph0.isDirected());
  }
}
